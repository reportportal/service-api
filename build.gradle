/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'java-library'
    id 'org.owasp.dependencycheck' version '11.1.1'
    id 'org.springframework.boot' version "${springBootVersion}"
    id "com.epam.drill.integration.cicd" version "0.1.6"
}

import org.owasp.dependencycheck.reporting.ReportGenerator

apply from: 'project-properties.gradle'
apply from: "$scriptsUrl/build-commons.gradle"
apply from: "$scriptsUrl/build-info.gradle"
apply from: "$scriptsUrl/release-service.gradle"
apply from: "$scriptsUrl/signing.gradle"
apply from: "$scriptsUrl/copy-database-scripts.gradle"

//replaced with drill4j
//apply from: "$scriptsUrl/build-quality.gradle"
//apply from: "$scriptsUrl/jacoco.gradle"
//apply plugin: 'jacoco'

project.hasProperty('sealightsSession') && sealightsSession?.trim() ? apply(from: 'sealights.gradle') : println('No sealights session')

repositories {
    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
    mavenCentral { url "https://repo1.maven.org/maven2" }
}

java {
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

ext['spring-boot.version'] = "${springBootVersion}"

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:' + '5.13.1' : 'com.epam.reportportal:commons-bom:5.13.1')
        mavenBom('io.zonky.test.postgres:embedded-postgres-binaries-bom:16.2.0')
    }
}

println("Release mode: $releaseMode")

dependencies {
    if (releaseMode) {
        println("Using release dependencies")
        implementation 'com.epam.reportportal:commons-dao'
        implementation 'com.epam.reportportal:commons'
        implementation 'com.epam.reportportal:plugin-api'
    } else {
        println("Using snapshot dependencies")
//        implementation 'com.github.reportportal:commons-dao:0f555c9'
        implementation files('lib/commons-dao-tms.jar')
        implementation 'com.github.reportportal:commons:c7041ee'
        implementation ('com.github.reportportal:plugin-api:8874441') {
            exclude group: 'com.github.reportportal', module: 'commons-dao'
        }
    }
    implementation 'jakarta.servlet:jakarta.servlet-api:6.1.0'

    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'org.springframework.security:spring-security-acl'
    implementation 'org.springframework.security:spring-security-core'
    implementation 'org.springframework.security:spring-security-oauth2-core'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework:spring-context-support'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'


    implementation 'com.opencsv:opencsv:5.10'
    implementation "org.jooq:jooq:${jooqVersion}"

    // Optional for spring-boot-starter-amqp
    implementation "com.rabbitmq:http-client:5.3.0"
    implementation("org.apache.httpcomponents.client5:httpclient5:5.4.2") // supports gzip encoding

    // check authentication error response format for versions higher than 6.21.3
    implementation('net.sf.jasperreports:jasperreports:6.21.3') { //TODO: consider upgrade to 7.0.1+
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-xml'
    }
    // JasperReport's export to XLS uses Apache POI and openpdf for PDF export
    implementation 'org.apache.poi:poi:5.4.0'
    implementation 'com.github.librepdf:openpdf:2.0.3'

    implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'

    implementation 'xerces:xercesImpl:2.12.2'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.80'
    implementation 'com.google.api-client:google-api-client:2.6.0'

    implementation('commons-validator:commons-validator:1.9.0') {
        exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }
    implementation 'com.github.ben-manes.caffeine:caffeine'

    implementation "org.apache.jclouds.api:filesystem:${jcloudsVersion}"
    implementation 'org.apache.commons:commons-compress'

    implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"

    // add lombok support
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    //  Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework:spring-web'
    implementation 'org.springframework:spring-test'
    testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:10.0.0'

    testImplementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    testImplementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // common dao temp
    implementation "io.swagger.core.v3:swagger-annotations-jakarta:2.2.27"
    // jooq dependencies
    api "org.jooq:jooq:${jooqVersion}"
    implementation "org.postgresql:postgresql:${jdbcDriverVersion}"

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

    implementation 'org.springframework:spring-webmvc'
    implementation 'org.apache.tika:tika-core'
    api('org.springframework.boot:spring-boot-starter-data-jpa') {
        exclude group: 'org.hibernate', module: 'hibernate-core'
    }
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    implementation 'io.minio:minio:8.5.17'

    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    api 'org.apache.commons:commons-collections4:4.4'

    api 'org.jasypt:jasypt:1.9.3'

    api 'io.zonky.test:embedded-postgres:2.0.7'
    api 'org.apache.commons:commons-compress:1.27.1'
    implementation 'org.flywaydb:flyway-core:10.15.2'
    implementation 'org.flywaydb:flyway-database-postgresql:10.20.0'

    api "org.apache.jclouds.api:s3:${jcloudsVersion}"
    api "org.apache.jclouds.provider:aws-s3:${jcloudsVersion}"
    api "org.apache.jclouds.api:filesystem:${jcloudsVersion}"
    implementation 'software.amazon.awssdk:aws-core:2.29.50'
    implementation 'software.amazon.awssdk:sts:2.29.50'
    api 'com.google.guava:guava:33.2.1-jre'

    // add lombok support
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring6-test:10.0.0'
}

processResources {
    dependsOn(gitInfo)
    filesMatching('application.properties') {
        expand(project.properties)
    }
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    options.encoding = "UTF-8"
    options.compilerArgs << "-parameters"
    options.debug = true
    options.debugOptions.debugLevel = "source,lines,vars"
}

dependencyCheck {
    formats = [ReportGenerator.Format.HTML, ReportGenerator.Format.XML]
//    cveValidForHours = 1
}

bootJar {
    duplicatesStrategy = duplicatesStrategy.EXCLUDE
    project.hasProperty('gcp') ? getArchiveFileName().set('app.jar') : archiveClassifier.set('' +
            'exec')
}
jar.enabled(true)
jar.archiveClassifier.set('')

test {
    dependsOn(copyTestDatabaseScripts)
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events = ['failed']
        exceptionFormat = 'short'
    }
    reports {
        junitXml.required = true
    }
}

publish.dependsOn build
publish.mustRunAfter build
checkCommitNeeded.dependsOn removeScripts

//replaced with drill4j
//build.dependsOn jacocoTestReport

drill {
    groupId = "report-portal"
    appId = "service-api"
    packagePrefixes = ["com/epam/ta/reportportal"]
    enableTestAgent {
        enabled = System.getenv("DRILL_AGENT_ENABLED") == "true" ?: false
        version = "0.23.3"
    }
    enableAppAgent {
        enabled = System.getenv("DRILL_AGENT_ENABLED") == "true" ?: false
        version = "0.9.4"
    }
}

springBoot {
    buildInfo {
        properties {
            name = "API Service"
            version = "${project.version}"
            additional = [
                    "description": "$project.description",
                    "branch"     : getCurrentGitBranch(),
                    "repo"       : "reportportal/service-api"
            ]
            excludes = ['time', 'artifact']
        }
    }
}

tasks.preTagCommit.enabled = false
tasks.updateVersion.enabled = false
tasks.commitNewVersion.enabled = false
