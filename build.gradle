/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.java.library)
    alias(libs.plugins.owasp.dependencycheck)
    alias(libs.plugins.drill.integration)
    alias(libs.plugins.openapi.generator)
    alias(libs.plugins.spring.boot)
}

import org.owasp.dependencycheck.reporting.ReportGenerator

apply from: 'project-properties.gradle'
apply from: "$scriptsUrl/build-commons.gradle"
apply from: "$scriptsUrl/build-info.gradle"
apply from: "$scriptsUrl/release-service.gradle"
apply from: "$scriptsUrl/signing.gradle"
apply from: "$scriptsUrl/copy-database-scripts.gradle"

project.hasProperty('sealightsSession') && sealightsSession?.trim() ?
        apply(from: 'sealights.gradle') :
        println('No sealights session')

java {
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

println("Release mode: $releaseMode")

dependencies {
    if (releaseMode) {
        println("Using release dependencies")
        implementation(libs.bundles.reportportal)
        implementation(libs.reportportal.plugin.api) {
            exclude group: 'com.github.reportportal', module: 'commons-dao'
        }
    } else {
        println("Using snapshot dependencies")
        implementation(libs.bundles.reportportal.dev)
        implementation(libs.reportportal.plugin.api.dev) {
            exclude group: 'com.github.reportportal', module: 'commons-dao'
        }
    }
    api(platform(libs.spring.boot.bom))
    implementation(platform(libs.reportportal.commons.bom))
    implementation(platform(libs.zonky.postgres.bom))
    implementation(libs.bundles.spring.boot.starters)
    implementation(libs.bundles.spring.security)

    // MultipartFileUtils requires org.springframework.mock.web.MockMultipartFile
    // TODO: implement own MultipartFile class
    implementation(libs.spring.test)

    implementation(libs.springdoc.openapi)
    implementation(libs.micrometer)
    implementation(libs.opencsv)
    implementation(libs.jooq)
    implementation(libs.slugify)

    // Optional for spring-boot-starter-amqp
    implementation(libs.rabbitmq.http.client)
    implementation(libs.httpclient5) // supports gzip encoding

    // Check authentication error response format for versions higher than 6.21.3 TODO: consider upgrade to 7.0.1+
    implementation(libs.jasperreports) {
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-xml'
    }

    // JasperReport's export to XLS uses Apache POI and openpdf for PDF export
    implementation(libs.apache.poi)
    implementation(libs.openpdf)
    implementation(libs.jakarta.inject.api)
    implementation(libs.jakarta.mail)
    implementation(libs.xerces)
    implementation(libs.bouncycastle)
    implementation(libs.google.api.client)
    implementation(libs.commons.validator) {
        exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }
    implementation(libs.caffeine)
    implementation(libs.apache.jclouds.filesystem)
    implementation(libs.apache.commons.compress)
    implementation(libs.hibernate.validator)
    implementation(libs.json.schema.validator)

    // Add lombok support
    compileOnly(libs.lombok)
    annotationProcessor(libs.lombok)

    //  Tests
    testImplementation(libs.bundles.test.libs)
    testCompileOnly(libs.lombok)
    testAnnotationProcessor(libs.lombok)
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/generated/src/main/java"
        }
    }
}

openApiGenerate {
    generatorName.set("spring")
    inputSpec.set("$rootDir/api-registry/api/openapi/reportportal-api.yaml")
    outputDir.set("${layout.buildDirectory.get()}/generated")
    configFile.set("$rootDir/src/main/resources/openapi/config.json")
    skipOverwrite.set(false)
    cleanupOutput.set(true)
    // verbose.set(true)
}

processResources {
    dependsOn(gitInfo)
    filesMatching('application.properties') {
        expand(project.properties)
    }
}

tasks.register('updateApiSubmodule', Exec) {
    commandLine 'git', 'submodule', 'update', '--init', "--recursive"
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    options.encoding = "UTF-8"
    options.compilerArgs << "-parameters"
    options.debug = true
    options.debugOptions.debugLevel = "source,lines,vars"
}

tasks.register('downloadManifestSchema') {
    doLast {
        def schemaDir = file("${projectDir}/src/main/resources/schema")
        schemaDir.mkdirs()

        def schemaUrl = new URI(manifestSchemaUrl).toURL()
        def fileName = schemaUrl.path.tokenize('/').last()
        def schemaFile = new File(schemaDir, fileName)

        schemaFile.withOutputStream { out ->
            out << schemaUrl.openStream()
        }
    }
}

dependencyCheck {
    formats = [ReportGenerator.Format.HTML, ReportGenerator.Format.XML] as List<String>
//    cveValidForHours = 1
}

bootJar {
    duplicatesStrategy = duplicatesStrategy.EXCLUDE
    project.hasProperty('gcp') ? getArchiveFileName().set('app.jar') : archiveClassifier.set('' + 'exec')
}
jar.enabled(true)
jar.archiveClassifier.set('')

test {
    dependsOn(copyTestDatabaseScripts)
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events = ['failed']
        exceptionFormat = 'short'
    }
    reports {
        junitXml.required = true
    }
}

compileJava.dependsOn tasks.named('openApiGenerate')
compileJava.dependsOn tasks.named('downloadManifestSchema')
publish.dependsOn build
publish.mustRunAfter build
checkCommitNeeded.dependsOn removeScripts

//replaced with drill4j
//build.dependsOn jacocoTestReport

drill {
    groupId = "report-portal"
    appId = "service-api"
    packagePrefixes = ["com/epam/ta/reportportal"]
    buildVersion = System.getenv("DRILL_BUILD_VERSION")
    enableTestAgent {
        enabled = System.getenv("DRILL_AGENT_ENABLED") == "true" ?: false
        version = "0.23.5"
    }
    enableAppAgent {
        enabled = System.getenv("DRILL_AGENT_ENABLED") == "true" ?: false
        version = "0.9.7"
    }
    enableTestRecommendations {
        enabled = System.getenv("DRILL_RECOMMENDATIONS_ENABLED") == "true" ?: false
        coveragePeriodDays = 30
    }
}

springBoot {
    buildInfo {
        properties {
            name = "API Service"
            version = "${project.version}"
            additional = [
                    "description": "$project.description",
                    "branch"     : getCurrentGitBranch(),
                    "repo"       : "reportportal/service-api"
            ]
            excludes = ['time', 'artifact']
        }
    }
}

tasks.preTagCommit.enabled = false
tasks.updateVersion.enabled = false
tasks.commitNewVersion.enabled = false
