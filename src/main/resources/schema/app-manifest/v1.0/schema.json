{
  "$id": "https://reportportal.io/schema-registry/app-manifest/v1.0/schema.json",
  "$schema": "http://json-schema.org/draft-07/schema",
  "title": "Remote Plugin Manifest",
  "description": "The schema for the manifest of a remote application.",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "$ref": "#/$defs/uri"
    },
    "manifestVersion": {
      "type": "string",
      "description": "The version of the schema this manifest is using. This is initial version of the schema",
      "const": "1.0"
    },
    "id": {
      "$ref": "#/$defs/slug",
      "description": "A unique identifier for this app."
    },
    "name": {
      "type": "string",
      "description": "The display name for the app.",
      "maxLength": 32
    },
    "version": {
      "$ref": "#/$defs/semver",
      "description": "The version of the app. Changes to your manifest should cause a version change. This version string must follow the semver standard (http://semver.org)."
    },
    "description": {
      "type": "string",
      "description": "The description of the app. Maximum length is 4000 characters.",
      "maxLength": 4000
    },
    "group": {
      "type": "string",
      "description": "The group of the app. This is used to specify the group of the app in the UI.",
      "enum": [
        "bts",
        "notification",
        "auth",
        "import",
        "other"
      ]
    },
    "developer": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The display name for the developer.",
          "maxLength": 32
        },
        "websiteUrl": {
          "$ref": "#/$defs/webUrl",
          "description": "The url to the page that provides more information about the developer."
        }
      },
      "required": [
        "name"
      ]
    },
    "documentation": {
      "$ref": "#/$defs/webUrl",
      "description": "The url to the documentation for the app."
    },
    "license": {
      "$ref": "#/$defs/spdx",
      "description": "The license for the app. This should be a valid SPDX license (https://spdx.org/licenses/) identifier."
    },
    "baseUrl": {
      "$ref": "#/$defs/webUrl",
      "description": "The base url for the app."
    },
    "icon": {
      "$ref": "#/$defs/icon",
      "description": "The icon for the app. It's used as a application icon in the UI."
    },
    "permissions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "scopes": {
          "type": "array",
          "description": "The scopes that the app requires.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "scopes"
      ]
    },
    "modules": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "projectPages": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "The project pages that the app provides.",
            "minItems": 1,
            "properties": {
              "slug": {
                "$ref": "#/$defs/slug",
                "description": "A unique identifier for this project page.",
                "maxLength": 32
              },
              "name": {
                "type": "string",
                "description": "The display name for the project page.",
                "maxLength": 32
              },
              "url": {
                "$ref": "#/$defs/relativePath",
                "description": "A relative file path to the project page."
              },
              "icon": {
                "$ref": "#/$defs/icon"
              }
            },
            "required": [
              "slug",
              "name",
              "url",
              "icon"
            ]
          }
        }
      }
    }
  },
  "required": [
    "manifestVersion",
    "version",
    "id",
    "developer",
    "name",
    "description",
    "icon",
    "permissions",
    "baseUrl",
    "modules"
  ],
  "$defs": {
    "uri": {
      "type": "string",
      "maxLength": 2048,
      "pattern": "^https?://.*"
    },
    "relativePath": {
      "type": "string",
      "maxLength": 2048,
      "pattern": "^/.*"
    },
    "webUrl": {
      "type": "string",
      "maxLength": 2048,
      "pattern": "^[Hh][Tt][Tt][Pp][Ss]?://.*[^/]$"
    },
    "semver": {
      "type": "string",
      "maxLength": 100,
      "pattern": "^([0-9]|[1-9][0-9]*)\\.([0-9]|[1-9][0-9]*)\\.([0-9]|[1-9][0-9]*)(?:-([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$"
    },
    "slug": {
      "type": "string",
      "pattern": "^[a-z0-9-]+$"
    },
    "spdx": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9-.]+$"
    },
    "icon": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "url",
            "base64",
            "svg"
          ]
        },
        "content": {
          "type": "string",
          "description": "The content of the icon. If type is url, this should be a relative file path. If type is base64, this should be a base64 encoded image. If type is svg, this should be an svg string."
        }
      },
      "required": [
        "type",
        "content"
      ],
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "url"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "type": "string",
                "maxLength": 2048,
                "pattern": "^/.*"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "base64"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "type": "string",
                "pattern": "^data:image/(png|jpeg|gif);base64,[A-Za-z0-9+/]+={0,2}$"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "svg"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "type": "string",
                "pattern": "^<svg.*</svg>$"
              }
            }
          }
        }
      ]
    }
  }
}