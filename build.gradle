/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id 'org.springframework.boot' version '2.7.17'
    id 'java'
    id "org.owasp.dependencycheck" version "5.3.1"
}

import org.owasp.dependencycheck.reporting.ReportGenerator

apply from: 'project-properties.gradle'
apply from: "$scriptsUrl/build-docker.gradle"
apply from: "$scriptsUrl/build-commons.gradle"
apply from: "$scriptsUrl/build-info.gradle"
apply from: "$scriptsUrl/release-service.gradle"
apply from: "$scriptsUrl/signing.gradle"
apply from: "$scriptsUrl/copy-database-scripts.gradle"
//apply from: "$scriptsUrl/build-quality.gradle"
//apply from: "$scriptsUrl/jacoco.gradle"
//apply plugin: 'jacoco'
project.hasProperty('sealightsSession') && sealightsSession?.trim() ? apply(from: 'sealights.gradle') : println('No sealights session')

repositories {
    mavenCentral { url "https://repo1.maven.org/maven2" }
    if (releaseMode) {
        dependencyRepos.forEach { path ->
            maven {
                setUrl("https://maven.pkg.github.com/reportportal/${path}")
                credentials {
                    username = findProperty("githubUserName")
                    password = findProperty("githubToken")
                }
            }
        }
    } else {
        maven { url 'https://jitpack.io' }
    }
    maven { url "https://jaspersoft.jfrog.io/artifactory/third-party-ce-artifacts" }
}

ext['hibernate.version'] = '5.4.18.Final'
ext['hibernate-validator.version'] = '6.1.5.Final'
ext['log4j2.version'] = '2.17.1'
ext['log4j-to-slf4j.version'] = '2.17.1'
ext['spring-boot.version'] = '2.5.12'

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:' + '5.10.0' : 'com.github.reportportal:commons-bom:6aa55fc0')
        mavenBom('io.zonky.test.postgres:embedded-postgres-binaries-bom:12.9.0')
    }
}

dependencies {
    if (releaseMode) {
        implementation 'com.epam.reportportal:commons-dao'
        implementation 'com.epam.reportportal:commons-rules'
        implementation 'com.epam.reportportal:commons-model'
        implementation 'com.epam.reportportal:commons'
        implementation 'com.epam.reportportal:commons-fonts'
        implementation 'com.epam.reportportal:plugin-api'
    } else {
        implementation 'com.github.reportportal:commons-events:e337f8b7be'
        implementation 'com.github.reportportal:commons-dao:90f815a'
        implementation 'com.github.reportportal:commons-rules:e859db2'
        implementation 'com.github.reportportal:commons-model:9ec180b'
        implementation 'com.github.reportportal:commons:ce2166b'
        implementation 'com.github.reportportal:commons-fonts:d6e62dd'
        implementation 'com.github.reportportal:plugin-api:b9868b2'
    }

    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-batch'


    implementation group: 'com.opencsv', name: 'opencsv', version: '5.7.1'

    implementation 'org.apache.tomcat.embed:tomcat-embed-core:9.0.81'
    implementation 'org.apache.tomcat.embed:tomcat-embed-el:9.0.68'
    implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:9.0.68'

    implementation 'org.springframework.batch:spring-batch-core:4.2.3.RELEASE'
    implementation 'org.springframework.batch:spring-batch-infrastructure:4.2.3.RELEASE'


    // Optional for spring-boot-starter-amqp
    implementation "com.rabbitmq:http-client:2.1.0.RELEASE"

    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'net.sf.jasperreports:jasperreports:6.12.2'
    implementation 'com.lowagie:itext:2.1.7.js7'
    // JasperReport's export to XLS uses Apache POI
    implementation 'org.apache.poi:poi:4.1.1'
    implementation 'io.springfox:springfox-swagger2'

    ///// Security
    implementation 'org.springframework.security:spring-security-core:5.5.8'
    implementation 'org.springframework.security:spring-security-config:5.5.8'
    implementation 'org.springframework.security:spring-security-web:5.5.8'

    implementation 'org.springframework.security.oauth:spring-security-oauth2:2.5.2.RELEASE'
    implementation 'org.springframework.security:spring-security-jwt:1.0.11.RELEASE'
    implementation 'org.springframework.security:spring-security-acl'
    implementation 'com.github.ben-manes.caffeine:caffeine:2.8.0'

    implementation 'org.springframework:spring-beans:5.3.20'
    implementation 'org.springframework:spring-core:5.3.20'
    implementation 'org.codehaus.jettison:jettison:1.5.4'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.69'
    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'org.yaml:snakeyaml:1.32'
    implementation 'org.hibernate:hibernate-core:5.4.24.Final'

    // Metrics
    implementation 'io.micrometer:micrometer-registry-prometheus:1.7.10'

    //  Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:5.6.0'
    testImplementation 'net.bytebuddy:byte-buddy:1.14.9'
    testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:7.0.0'
}

processResources {
    dependsOn(gitInfo)
    filesMatching('application.properties') {
        expand(project.properties)
    }
}

//tasks.withType(Javaimplementation) {
//    options.encoding = "UTF-8"
//    options.implementationrArgs << "-parameters"
//    options.debug = true
//    options.debugOptions.debugLevel = "source,lines,vars"
//}

dependencyCheck {
    formats = [ReportGenerator.Format.HTML, ReportGenerator.Format.XML]
//    cveValidForHours = 1
}

bootJar {
    project.hasProperty('gcp') ? getArchiveFileName().set('app.jar') : archiveClassifier.set('exec')
}
jar.enabled(true)
jar.archiveClassifier.set('')

test {
    dependsOn(copyTestDatabaseScripts)
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events = ['failed']
        exceptionFormat = 'short'
    }
//    reports {
//        junitXml.enabled = true
//    }
}

//jacocoTestReport {
//    doFirst {
//        classDirectories.setFrom(
//                classDirectories.files.collect {
//                    fileTree(dir: it, exclude: [
//                            'com/epam/ta/reportportal/core/events/AnalysisEvent.class',
//                            'com/epam/ta/reportportal/auth/acl/ReportPortalAclAuthorizationStrategyImpl.class',
//                            '**/Abstract*.class'
//                    ])
//                }
//        )
//    }
//
//}

publish.dependsOn build
publish.mustRunAfter build
checkCommitNeeded.dependsOn removeScripts
//build.dependsOn jacocoTestReport
