/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
    id 'java-library'
    id 'org.owasp.dependencycheck' version '10.0.4'
    id 'org.springframework.boot' version "${springBootVersion}"
}

import org.owasp.dependencycheck.reporting.ReportGenerator

apply from: 'project-properties.gradle'
apply from: "$scriptsUrl/build-commons.gradle"
apply from: "$scriptsUrl/build-info.gradle"
apply from: "$scriptsUrl/release-service.gradle"
apply from: "$scriptsUrl/signing.gradle"
apply from: "$scriptsUrl/copy-database-scripts.gradle"
//apply from: "$scriptsUrl/build-quality.gradle"
apply from: "$scriptsUrl/jacoco.gradle"
apply plugin: 'jacoco'
project.hasProperty('sealightsSession') && sealightsSession?.trim() ? apply(from: 'sealights.gradle') : println('No sealights session')

repositories {
    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
    mavenCentral { url "https://repo1.maven.org/maven2" }
}

java {
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

ext['spring-boot.version'] = "${springBootVersion}"

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:' + '5.11.7' : 'com.epam.reportportal:commons-bom:5.11.7')
        mavenBom('io.zonky.test.postgres:embedded-postgres-binaries-bom:16.2.0')
    }
}

dependencies {
    if (releaseMode) {
        implementation 'com.epam.reportportal:commons-dao'
        implementation 'com.epam.reportportal:commons'
        implementation 'com.epam.reportportal:plugin-api:5.11.1'
    } else {
        implementation 'com.github.reportportal:commons-dao:43dce52'
        implementation 'com.github.reportportal:commons:e55b9e6'
        implementation 'com.github.reportportal:plugin-api:bffdccf'
    }

    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework:spring-context-support'
    implementation 'org.springframework.security:spring-security-jwt:1.1.1.RELEASE'
    implementation 'org.springframework.security:spring-security-core'
    implementation 'org.springframework.security:spring-security-oauth2-core'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    implementation 'com.opencsv:opencsv:5.9'
    implementation "org.jooq:jooq:${jooqVersion}"

    // Optional for spring-boot-starter-amqp
    implementation "com.rabbitmq:http-client:5.2.0"

    // check authentication error response format for versions higher than 6.21.3
    implementation('net.sf.jasperreports:jasperreports:6.21.3') {
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-xml'
    }
    implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'

    implementation 'xerces:xercesImpl:2.12.2'
    implementation 'com.lowagie:itext:4.2.2'
    // JasperReport's export to XLS uses Apache POI
    implementation 'org.apache.poi:poi:4.1.2'
    implementation 'com.google.api-client:google-api-client:2.6.0'

    implementation('commons-validator:commons-validator:1.9.0') {
        exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }
    implementation 'org.springframework.security:spring-security-acl'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'commons-fileupload:commons-fileupload:1.5' // TODO to delete

    implementation "org.apache.jclouds.api:filesystem:${jcloudsVersion}"

    implementation 'org.apache.commons:commons-compress:1.27.1'

    implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"

    // Metrics
    implementation 'io.micrometer:micrometer-registry-prometheus:1.13.2'

    // add lombok support
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    //  Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework:spring-web'
    implementation 'org.springframework:spring-test'
    testImplementation 'net.bytebuddy:byte-buddy:1.14.17'
    testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:10.0.0'
}

processResources {
    dependsOn(gitInfo)
    filesMatching('application.properties') {
        expand(project.properties)
    }
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    options.encoding = "UTF-8"
    options.compilerArgs << "-parameters"
    options.debug = true
    options.debugOptions.debugLevel = "source,lines,vars"
}

dependencyCheck {
    formats = [ReportGenerator.Format.HTML, ReportGenerator.Format.XML]
//    cveValidForHours = 1
}

bootJar {
    duplicatesStrategy = duplicatesStrategy.EXCLUDE
    project.hasProperty('gcp') ? getArchiveFileName().set('app.jar') : archiveClassifier.set('' +
            'exec')
}
jar.enabled(true)
jar.archiveClassifier.set('')

test {
    dependsOn(copyTestDatabaseScripts)
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events = ['failed']
        exceptionFormat = 'short'
    }
    reports {
        junitXml.required = true
    }
}

publish.dependsOn build
publish.mustRunAfter build
checkCommitNeeded.dependsOn removeScripts
build.dependsOn jacocoTestReport
