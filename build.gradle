buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://maven.eveoh.nl/content/repositories/releases"
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.4'
    }
}


plugins {
    id 'net.researchgate.release' version '2.4.1'
    id "com.jfrog.bintray" version "1.7"
}

apply plugin: 'java'
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: 'jacoco'

apply from: 'build-quality.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/build-docker.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/build-info.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/release-service.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

project.ext {
    limits = [
            'instruction': 68,
            'branch'     : 41,
            'line'       : 67,
            'complexity' : 49,
            'method'     : 73,
            'class'      : 87
    ]
    isDebugMode = System.getProperty("DEBUG", "false") == "true"
    releaseMode = project.hasProperty("releaseMode")
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://dl.bintray.com/epam/reportportal" }
    maven { url "http://jasperreports.sourceforge.net/maven2" }
    maven { url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts" }
    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Dalston.SR1"
        mavenBom "org.springframework.boot:spring-boot-dependencies:1.5.4.RELEASE"
    }
}

configurations {
    api
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    if (releaseMode) {
        compile 'com.epam.reportportal:commons-dao:3.0.1'
        compile 'com.epam.reportportal:commons-rules:3.0.1'
        compile 'com.epam.reportportal:commons-model:3.0.1'
        compile 'com.epam.reportportal:commons:3.0.1'
    } else {
        compile('com.github.reportportal:commons-dao:d36ef72')
        compile('com.github.reportportal:commons-rules:3.0.1')
        compile 'com.github.reportportal:commons-model:a09e86c'
        compile ('com.github.reportportal:commons:6dbe5c6')
    }

    compile 'org.jasypt:jasypt:1.9.2'


    compile 'commons-fileupload:commons-fileupload:1.3.3'
    compile 'commons-validator:commons-validator:1.6'
    compile 'org.slf4j:slf4j-api:1.7.24'

    compile "ch.qos.logback:logback-classic:${logback}"
    compile 'net.coobird:thumbnailator:0.4.8'
    compile 'com.sun.mail:javax.mail:1.5.6'

//    compile 'org.springframework.cloud:spring-cloud-config-client'
    compile 'org.springframework.retry:spring-retry'

    compile 'org.springframework.cloud:spring-cloud-starter-eureka'
    compile 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    compile 'org.springframework.cloud:spring-cloud-starter-security'


    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-freemarker'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile 'org.springframework.cloud:spring-cloud-starter-oauth2'

    compile 'org.springframework.data:spring-data-mongodb'

    compile 'com.github.mongobee:mongobee:0.12'


    compile 'net.sf.jasperreports:jasperreports:6.3.1'
    //JasperReport's export to XLS uses Apache POI. Reports 6.3.1 needs version NOT
    //higher than 3.14 since 3.15 contains breaking API changes
    compile 'org.apache.poi:poi:3.14'

    compile 'javax.inject:javax.inject:1'
    compile 'com.google.code.findbugs:annotations:3.0.1'

    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'

    compile 'com.google.guava:guava:21.0'

    api 'org.jacoco:org.jacoco.agent:0.7.7.201606060606'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'

    testCompile 'com.jayway.jsonpath:json-path:2.2.0'
    testCompile 'com.github.fakemongo:fongo:2.0.12'

    testCompile 'org.apache.commons:commons-math3:3.6.1'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.bitmechanic:dumbster:1.9.0.2'

    testCompile 'org.jsoup:jsoup:1.10.2'

}


task staticResources(type: Copy) {

    from("${project.projectDir}/../../public/common", {
        include '*.jks'
        into 'certificate'
//        rename {'reportportal-client-v2.jks'}
    })
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

//Start section for external jacoco test report
tasks.withType(JavaCompile) {
    if (isDebugMode) {
        options.debug = true
        options.compilerArgs = ["-g"]
    }
}

task copyJacocoAgentToLibs(type: Copy) {
    if (isDebugMode) {
        from {
            configurations.api.collect { zipTree(it) }
        }
        into "${project.buildDir}/libs/"
        include 'jacocoagent.jar'
    }
}

jar.dependsOn copyJacocoAgentToLibs
//End section for external jacoco test report

processResources.dependsOn staticResources
build.dependsOn jacocoTestReport
test {
//    testLogging.showStandardStreams = true

    jacocoTestReport {
        reports {
            xml.enabled true
        }
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/entity/**', '**/aop/**', '**/jasper/**', '**/configs/**'])
            })
        }
        doLast {
            def report = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
            logger.lifecycle("Checking coverage results: ${report}")

            def parser = new XmlParser()
            parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
            parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
            def results = parser.parse(report)

            def percentage = {
                def covered = it.'@covered' as Double
                def missed = it.'@missed' as Double
                ((covered / (covered + missed)) * 100).round(2)
            }

            def counters = results.counter
            def metrics = [:]
            metrics << [
                    'instruction': percentage(counters.find { (it.'@type' == 'INSTRUCTION') }),
                    'branch'     : percentage(counters.find { (it.'@type' == 'BRANCH') }),
                    'line'       : percentage(counters.find { (it.'@type' == 'LINE') }),
                    'complexity' : percentage(counters.find { (it.'@type' == 'COMPLEXITY') }),
                    'method'     : percentage(counters.find { (it.'@type' == 'METHOD') }),
                    'class'      : percentage(counters.find { (it.'@type' == 'CLASS') })
            ]


            def failures = []
            metrics.each {
                def limit = limits[it.key]
                if (it.value < limit) {
                    failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                }
            }

            if (failures) {
                logger.quiet("------------------ Code Coverage Failed -----------------------")
                failures.each {
                    logger.quiet(it)
                }
                logger.quiet("---------------------------------------------------------------")
                throw new GradleException("Code coverage failed")
            } else {
                logger.quiet("Passed Code Coverage Checks")
            }
        }
    }
}
