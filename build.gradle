/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id "org.springframework.boot" version "2.1.5.RELEASE"
    id "de.undercouch.download" version "3.4.3"
    id 'net.researchgate.release' version '2.8.0'
    id "com.jfrog.bintray" version "1.8.4"
    id 'java'
    id 'jacoco'
    id "org.owasp.dependencycheck" version "5.2.0"
    id "org.ajoberstar.grgit" version "3.1.1"
}


apply from: 'build-quality.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/build-docker.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/build-info.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/build-commons.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/release-service.gradle'


sourceCompatibility = 1.8
targetCompatibility = 1.8

project.ext {
    limits = [
            'instruction': 70,
            'branch'     : 54,
            'line'       : 75,
            'complexity' : 60,
            'method'     : 65,
            'class'      : 90
    ]
    isDebugMode = System.getProperty("DEBUG", "false") == "true"
    releaseMode = project.hasProperty("releaseMode")
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://dl.bintray.com/epam/reportportal" }
    maven { url "http://jasperreports.sourceforge.net/maven2" }
    maven { url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts" }
    maven { url "https://dl.bintray.com/michaelklishin/maven/" }

    maven { url 'https://repo.spring.io/libs-milestone' }

//    if (!releaseMode) {
    maven { url 'https://jitpack.io' }
//    }
}

dependencyManagement {
    imports {
        mavenBom "com.github.reportportal:commons-bom:8706fef"
    }
}

sourceSets {
    generated {
        java.srcDir "${buildDir}/generated/src/java/"
    }
}

compileGeneratedJava {
    classpath = configurations.compile
}
compileJava {
    source += sourceSets.generated.java
}

configurations {
    api
}

dependencies {
    if (releaseMode) {
        compile 'com.epam.reportportal:commons-dao:5.0.0-BETA-12'
        compile 'com.epam.reportportal:commons-rules:5.0.0-BETA-6'
        compile 'com.epam.reportportal:commons-model:5.0.0-BETA-12'
        compile 'com.epam.reportportal:commons:5.0.0-BETA-2'
        compile('com.epam.reportportal:plugin-api:5.0.0-BETA-7')
    } else {
        compile 'com.github.reportportal:commons-dao:65c636f'
        compile 'com.github.reportportal:commons-rules:5.0.0-BETA-6'
        compile 'com.github.reportportal:commons-model:1b02f9c'
        compile('com.github.reportportal:commons:5.0.0-BETA-2')
        compile('com.github.reportportal:plugin-api:5.0.0-BETA-7')
    }

    //saucelabs
    compile 'com.saucelabs:saucerest:1.0.40'

    //move this to the plugin-api
    compile 'io.atlassian.fugue:fugue:4.7.2'
    compile('com.atlassian.jira:jira-rest-java-client-core:5.1.2-2bd0a62e')
    //*****************************

    compile 'org.hibernate:hibernate-core:5.4.4.Final'

    compile("org.springframework.boot:spring-boot-starter-amqp")
    // Optional for spring-boot-starter-amqp
    compile "com.rabbitmq:http-client:2.1.0.RELEASE"

    compile "ch.qos.logback:logback-classic"
    compile 'com.sun.mail:javax.mail'
    compile 'org.aspectj:aspectjweaver:1.8.9'
    compile 'org.aspectj:aspectjrt:1.8.9'

    compile 'org.springframework.retry:spring-retry'

    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-freemarker'
    compile 'org.springframework.boot:spring-boot-starter-actuator'

///// Security
    compile 'org.springframework.cloud:spring-cloud-starter-security'
    compile 'org.springframework.cloud:spring-cloud-starter-oauth2'
    compile 'org.springframework.security:spring-security-oauth2-client'
    compile 'org.springframework.security:spring-security-jwt'
    compile 'org.springframework.security:spring-security-acl'
    compile 'com.github.ben-manes.caffeine:caffeine:2.6.2'

///// end of Security

    compile 'net.sf.jasperreports:jasperreports:6.9.0'
    //JasperReport's export to XLS uses Apache POI. Reports 6.3.1 needs version NOT
    //higher than 3.14 since 3.15 contains breaking API changes
    compile 'org.apache.poi:poi:3.17'

    compile 'com.google.code.findbugs:annotations:3.0.1'

    compile 'io.springfox:springfox-swagger-ui'
    compile 'io.springfox:springfox-swagger2'

    compile 'org.apache.commons:commons-collections4:4.1'

    api 'org.jacoco:org.jacoco.agent:0.8.3'

//  Tests
    testCompile 'com.github.reportportal:agent-java-junit5:c6e131bdb2'

    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.23.0'

    testCompile group: 'org.flywaydb.flyway-test-extensions', name: 'flyway-spring-test', version: '5.2.1'
}

wrapper {
    gradleVersion = '5.4.1'
}

release {
    pushReleaseVersionBranch = 'master'
}

//Start section for external jacoco test report
tasks.withType(JavaCompile) {
    if (isDebugMode) {
        options.debug = true
        options.compilerArgs = ["-g"]
    }
}

task copyJacocoAgentToLibs(type: Copy) {
    if (isDebugMode) {
        from {
            configurations.api.collect { zipTree(it) }
        }
        into "${project.buildDir}/libs/"
        include 'jacocoagent.jar'
    }
}

dependencyCheck {
    formats = ['HTML', 'XML']
//    cveValidForHours = 1
}

jar.dependsOn copyJacocoAgentToLibs
bootJar.dependsOn gitInfo
//End section for external jacoco test report

build.dependsOn jacocoTestReport

ext.src = [
        'https://raw.githubusercontent.com/reportportal/migrations/master/migrations/1_initialize_schema.up.sql': 'V001__initialize_schema.sql',
        'https://raw.githubusercontent.com/reportportal/migrations/master/migrations/3_default_data.up.sql'     : 'V002__default_data.sql',
]

task copyTestDatabaseScripts {
    doLast {
        for (s in src) {
            download {
                src s.key
                dest new File("${projectDir}/src/test/resources/db/migration/", s.value)
            }
        }
    }
}

task removeScripts {
    doLast {
        for (s in src) {
            def file = new File("${projectDir}/src/test/resources/db/migration/", s.value)
            file.delete()
        }
    }
}

bootJar {
    if (!releaseMode) {
        getArchiveFileName().set("${baseName}.${extension}")
    }
}

test.dependsOn copyTestDatabaseScripts
checkCommitNeeded.dependsOn removeScripts

test {
    useJUnitPlatform()
//    systemProperty 'junit.jupiter.extensions.autodetection.enabled', true
    //    testLogging.showStandardStreams = true
    maxParallelForks = 1

    testLogging {
        events 'failed'
        exceptionFormat 'short'
    }

//    testLogging.showStandardStreams = true
    reports {
        junitXml.enabled = true
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/entity/**',
                                            '**/aop/**',
                                            '**/jasper/**',
                                            '**/configs/**',
                                            '**/demodata/**',
                                            '**/exception/**',
                                            '**/analyzer/auto/model/**'
                ])
            })
        }
        doLast {
            def report = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
            logger.lifecycle("Checking coverage results: ${report}")

            def parser = new XmlParser()
            parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
            parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
            def results = parser.parse(report)

            def percentage = {
                def covered = it.'@covered' as Double
                def missed = it.'@missed' as Double
                ((covered / (covered + missed)) * 100).round(2)
            }

            def counters = results.counter
            def metrics = [:]
            metrics << [
                    'instruction': percentage(counters.find { (it.'@type' == 'INSTRUCTION') }),
                    'branch'     : percentage(counters.find { (it.'@type' == 'BRANCH') }),
                    'line'       : percentage(counters.find { (it.'@type' == 'LINE') }),
                    'complexity' : percentage(counters.find { (it.'@type' == 'COMPLEXITY') }),
                    'method'     : percentage(counters.find { (it.'@type' == 'METHOD') }),
                    'class'      : percentage(counters.find { (it.'@type' == 'CLASS') })
            ]


            def failures = []
            metrics.each {
                def limit = limits[it.key]
                if (it.value < limit) {
                    failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                }
            }

            if (failures) {
                logger.quiet("------------------ Code Coverage Failed -----------------------")
                failures.each {
                    logger.quiet(it)
                }
                logger.quiet("---------------------------------------------------------------")
                throw new GradleException("Code coverage failed")
            } else {
                logger.quiet("Passed Code Coverage Checks")
            }
        }
    }

    if (System.env.TRAVIS == 'true') {
        minHeapSize = "128m"
        maxHeapSize = "1g"
    }
}
